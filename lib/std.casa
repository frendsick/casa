fn memcpy dst:ptr src:ptr n:int {
    0 = i
    while i n >= do
        src i + load
        dst i + store
        1 += i
    done
}

impl array {
    fn length array -> int {
        # The first item of an array is its length
        load
    }

    fn nth array:array n:int -> any {
        # The first item of an array is its length
        array n + 1 + load
    }
}

struct List {
    size: int
    capacity: int
    array: array
}

impl List {
    fn from_array array:array -> List {
        array array.length dup List
    }

    fn nth List int -> any {
        List::array.nth
    }

    fn push self:List item:any {
        # Allocate new bigger array if necessary
        if self.capacity self.size >= then
            self.size 2 * self->capacity
            self.capacity 1 + alloc (array) = new_array
            self.size 1 + self.array (ptr) new_array (ptr) memcpy
            new_array self->array
        fi

        # Push the item to the array
        self.size 1 + self->size
        item self.array self.size + store
    }
}
