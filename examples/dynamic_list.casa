"=== Create list with items [1, 2, 3] ===" print
[1, 2, 3] List::from_array = list
list.print_metadata

"=== Push 4 to the list ===" print
4 list.push
list.print_metadata

"=== Shrink list size to 1 ===" print
1 list->size
list.print_metadata

fn memcpy dst:ptr src:ptr n:int {
    0 = i
    while i n >= do
        src i + load
        dst i + store
        1 += i
    done
}

impl array {
    fn length array -> int {
        # The first item of an array is its length
        load
    }

    fn nth array:array n:int -> any {
        # The first item of an array is its length
        array n + 1 + load
    }
}

struct List {
    size: int
    capacity: int
    array: array
}

impl List {
    fn from_array array:array -> List {
        array array.length dup List
    }

    fn nth List int -> any {
        List::array.nth
    }

    fn print_items self:List {
        0 = i
        while i self.size > do
            i self.nth print
            1 += i
        done
    }

    fn push self:List item:any {
        # Allocate new bigger array if necessary
        if self.capacity self.size >= then
            self.size 2 * self->capacity
            self.capacity 1 + alloc = new_array
            self.size 1 + self.array (ptr) new_array (ptr) memcpy
        fi

        # Push the item to the array
        self.size 1 + self->size
        item self.array self.size + store
    }

    fn print_metadata self:List {
        "SIZE" print
        self.size print
        "CAPACITY" print
        self.capacity print
        "ITEMS" print
        self.print_items
    }
}
